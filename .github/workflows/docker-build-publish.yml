name: Build and Publish

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - next
      - sanity
      - master
      - dev
      - develop
      - staging
      - production
      - release

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure Vars
        id: conf
        shell: bash
        # run: |
        #   # echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        #   # echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      # -
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # -
      #   name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-multi-buildx-${{ steps.conf.outputs.branch }}
      #     restore-keys: |
      #       ${{ runner.os }}-multi-buildx
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: codesark
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            codesark/codesark:${{ steps.conf.outputs.branch }}-${{ steps.conf.outputs.sha_short }}
            codesark/codesark:${{ steps.conf.outputs.branch }}
            codesark/codesark:latest
          # build-args: |
          #   NEXT_PUBLIC_SANITY_PROJECT_ID=${{ secrets.NEXT_PUBLIC_SANITY_PROJECT_ID }}
          #   NEXT_PUBLIC_SANITY_DATASET=${{ secrets.NEXT_PUBLIC_SANITY_DATASET }}
          #   NEXT_PUBLIC_SANITY_API_TOKEN=${{ secrets.NEXT_PUBLIC_SANITY_API_TOKEN }}
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,mode=max,dest=/tmp/.buildx-new-cache
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,mode=max,scope=${{ github.workflow }}

      # - name: Build and Push - codesark-sanity
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: ./sanity
      #     platforms: linux/amd64,linux/arm64
      #     push: true
      #     tags: |
      #       codesark/codesark-sanity:${{ steps.conf.outputs.branch }}-${{ steps.conf.outputs.sha_short }}
      #       codesark/codesark-sanity:${{ steps.conf.outputs.branch }}
      #       codesark/codesark-sanity:latest
      # -
      #   name: Move Cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-new-cache /tmp/.buildx-cache
    outputs:
      branch: ${{ steps.conf.outputs.branch }}
      sha_short: ${{ steps.conf.outputs.sha_short }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-push]
    steps:
      - name: Configure Vars
        id: conf
        shell: bash
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Configure SSH
        shell: bash
        env:
          SSH_HOST: ${{ secrets.DEPLOYMENT_HOST }}
          SSH_USER: ${{ secrets.DEPLOYMENT_USER }}
          SSH_KEY: ${{ secrets.DEPLOYMENT_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/prod.key
          chmod 600 ~/.ssh/prod.key
          cat >>~/.ssh/config <<END
          Host prod
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/prod.key
            StrictHostKeyChecking no
          END
      - name: Deploy
        env:
          IMAGE_TAG: "${{ needs.build-push.outputs.branch }}-${{ needs.build-push.outputs.sha_short }}"
        run: |
          ssh prod "
            kubectl set image deployment/codesark-webapp \
            codesark-webapp=codesark/codesark:$IMAGE_TAG \
            -n codesark
          "
        # ssh prod "
        #   kubectl set image deployment/codesark-webapp-sanity \
        #   codesark-webapp=codesark/codesark-sanity:$IMAGE_TAG \
        #   -n codesark
        # "
      - name: Cleanup
        run: rm -rf ~/.ssh

  # # Deploy using SSH Action
  # deploy:
  #   needs: [build-push]
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: SSH Deploy
  #       uses: appleboy/ssh-action@v0.1.6
  #       env:
  #         IMAGE_TAG: '${{ needs.build-push.outputs.branch }}-${{ needs.build-push.outputs.sha_short }}'
  #       with:
  #         host: ${{ secrets.DEPLOYMENT_HOST }}
  #         username: ${{ secrets.DEPLOYMENT_USER }}
  #         key: ${{ secrets.DEPLOYMENT_KEY }}
  #         envs: IMAGE_TAG
  #         script: |
  #           kubectl set image deployment/codesark-webapp \
  #           codesark-webapp=codesark/codesark:$IMAGE_TAG \
  #           -n codesark
